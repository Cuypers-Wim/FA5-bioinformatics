# Variant calling {#sec-variant-calling}

The previous steps of our pipeline were concerned with 1) the quality control of our sequence reads and 2) where all these reads fit on our reference genome. In this final step we will assess the genetic differences between each of our samples and the reference genome. This process is called _variant calling_ or _variant detection_. While conceptually simple, the main challenge is that it can be difficult to discern sequencing errors from real variants.

<!-- TODO subset of pipeline diagram -->

![Source: [http://melbournebioinformatics.github.io/MelBioInf_docs/tutorials/variant_calling_galaxy_1/variant_calling_galaxy_1/](http://melbournebioinformatics.github.io/MelBioInf_docs/tutorials/variant_calling_galaxy_1/variant_calling_galaxy_1/)](http://melbournebioinformatics.github.io/MelBioInf_docs/tutorials/variant_calling_galaxy_1/media/igv_mb.jpg)

![Source: [https://www.melbournebioinformatics.org.au/tutorials/tutorials/variant_calling_gatk1/variant_calling_gatk1/#section-3-variant-calling](https://www.melbournebioinformatics.org.au/tutorials/tutorials/variant_calling_gatk1/variant_calling_gatk1/#section-3-variant-calling)](https://www.melbournebioinformatics.org.au/tutorials/tutorials/variant_calling_gatk1/media/fig2.png)

steps:

https://www.melbournebioinformatics.org.au/tutorials/tutorials/variant_calling_gatk1/variant_calling_gatk1/#section-3-variant-calling

Section 3: Variant calling

    1. Apply HaplotypeCaller
    2. Apply CombineGVCFs
    3. Apply GenotypeGVCFs

Section 4: Filter and prepare analysis ready variants

    1. Variant Quality Score Recalibration
    2. Additional filtering
    3. Final analysis ready VCF file


file:///C:/Users/pmoris/Downloads/spectrum.00960-22-s0002-2.pdf
Variants in amplicons including overlapping regions were called
using HaplotypeCaller (GATK, v4.1.2) (6) and individual sample and control gVCF files were combined
to jointly call genotypes using GenotypeGVCFs. Variants were hard filtered (QUAL>30, overall DP>100,
MQ>50, QD>1.0, ReadPosRankSum >-10, SOR<4, GT depth >5) and annotated with SnpEff (v4.3T) (7),
resulting in 2,146 high quality genotypes. Per locus filtered depth of coverage (format field DP) was
used to calculate median depth of all loci per sample or per amplicon. Aligned coverage was calculated
as the number of bases passed filter divided by the number of bases (57445bp) targeted in the Pf
AmpliSeq assay. FastQ Screen was used to determine sources of contamination in uninfected controls
(8).



https://gatk.broadinstitute.org/hc/en-us/articles/360036883491-GenomicsDBImport
GenomicsDBImport offers the same functionality as CombineGVCFs


## Types of variants

- SNVs = SNPs and indels
- Tandem repeats and SVs

::: {.callout-note}
## Paired-end sequencing

Paired-end sequencing can help to detect larger structural variants.


![Detecting structural variants. Source: Baker (2012). Structural Variation: The Genome’s Hidden Architecture. [https://doi.org/10.1038/nmeth.1858](https://doi.org/10.1038/nmeth.1858)](../assets/structural-variant-detection.webp)

:::


<!-- https://www.nature.com/articles/nmeth.1858
https://www.nature.com/articles/nmeth.1858/figures/3 -->

Detecting Single Nucleotide Variants (SNVs)
<!-- TODO figure ppt -->

## Variant calling using GATK HaplotypeCaller

::: {.callout-tip}
Similar to the mapping step, there exist many different algorithmic implementations of variant calling:

- [GATK4](https://gatk.broadinstitute.org/hc/en-us)
- [bcftools](http://samtools.github.io/bcftools/) (made by the same developers as `samtools`)
- [FreeBayes](https://github.com/freebayes/freebayes)

<!-- TODO other variant callers: links + explanation -->

:::

We will make use of [GATK4 (Genomic Analysis ToolKit)](https://gatk.broadinstitute.org/hc/en-us) for the variant detection components of our pipeline. This is a very extensive toolkit which offers many different utilities. The first one we will explore is the GATK HaplotypeCaller, which does the heavy lifting. You can find out more about GATK HaplotypeCaller in this [GATK article](https://gatk.broadinstitute.org/hc/en-us/articles/360035531412-HaplotypeCaller-in-a-nutshell) or the [full documentation](https://gatk.broadinstitute.org/hc/en-us/articles/21905025322523-HaplotypeCaller).^[GATK is actually a java program, which means that we can pass it additional arguments like memory requirements. See the [GATK documentation](https://gatk.broadinstitute.org/hc/en-us/articles/360035531892-GATK4-command-line-syntax) for more information on this.]
<!-- TODO fig ppt -->

Java syntax

performs variant calling per sample to produce unfiltered genotype likelihoods.

<!-- Briefly, the HaplotypeCaller works by: 1. Identify active regions or regions with evidence of variations. 2. Re-asssemble the active regions. 3. Re-align active region reads to the assembled regions to identify allele. More details about the HaplotypeCaller can be found here. -->

## GATK

```bash
gatk HaplotypeCaller
    -R genome.fasta
	-I alignment.bam
	-O variants.g.vcf
	--native-pair-hmm-threads 2
    ERC GVCF
```

### Even more indices

GATK requires us to index the reference genome again(!), but this time using `samtools faidx ref.fasta`. Like before, this creates a new file in the reference genome directory, with the extension `.fai`. Additionally, we also need a `.dict` dictionary file, which can be created using `gatk CreateSequenceDictionary –R ref.fasta`.

<!-- TODO bam index also required samtools index alignment.sort.bam -->

::: {.callout-caution}
## Exercises

1. Create the required reference index files for both of your _Plasmodium_ reference genomes.
2. Run `gatk HaplotypeCaller` for a single BAM file and inspect the resulting VCF file.
3. Examine and run the [`call_variants.sh` script](../../training/scripts/call_variants.sh) (or create your own!) to process the BAM files for all of your samples.

:::

## VCF files revisited

The output of variant calling is a file in the Variant Call Format (`.vcf`), which we already encountered in @sec-vcf.

More info on [Dave Tang's Learning the VCF page](https://davetang.github.io/learning_vcf_file/)

![Overview of Variant Call Format (VCF). Source: [https://vcftools.sourceforge.net/VCF-poster.pdf](https://vcftools.sourceforge.net/VCF-poster.pdf)](../assets/vcf-format.png)

## Visualisation using IGV {#sec-vcf-visualisation}

Similar to our BAM files, we can visualise VCF files in tools like [IGV (Integrative Genomics Viewer)](https://igv.org/). For a tutorial on this, we refer to this [Data Carpentry workshop](https://datacarpentry.org/wrangling-genomics/04-variant_calling.html#viewing-with-igv).


## Merging
Merge the different .g.vfc files  (gatk CombineGVCFs)
Perform combined genotyping on the merged file (gatk GenotypeGVCFs)


## Filtering





::: {.callout-caution}
Optional: Perform hard filtering on the .vcf file. Use the GATK help file for hard filtering as guideline:
Filtering parameters described in: https://gatk.broadinstitute.org/hc/en-us/articles/360035890471-Hard-filtering-germline-short-variants
Guideline with suggested filtering cutoffs: https://gatk.broadinstitute.org/hc/en-us/articles/360035531112--How-to-Filter-variants-either-with-VQSR-or-by-hard-filtering#2
Step 1: Separate SNPs and indels
Step 2: add and perform filtering on SNPs
Step 3: add and perform filtering on Indels
!! you always first add a filter (using gatk VariantFiltration) and next do the effective filtering (gatk SelectVariants with the option --exclude-filtered true.
:::

<!-- TODO: section on GATK best practices + ML prediction of errors -->


<!-- TODO: extra reading
https://www.nature.com/articles/s41576-023-00590-0#Sec2
Fig. 1: Challenges of mapping and variant calling in simple repetitive regions.
https://www.nature.com/articles/s41576-023-00590-0/figures/1

 -->

<!-- TODO left-aligning indels https://training.galaxyproject.org/training-material/topics/variant-analysis/tutorials/non-dip/tutorial.html#left-aligning-indels -->
<!-- TODO filtering reads: https://training.galaxyproject.org/training-material/topics/variant-analysis/tutorials/non-dip/tutorial.html#filtering-reads -->
