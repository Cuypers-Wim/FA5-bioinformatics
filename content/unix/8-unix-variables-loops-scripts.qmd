# Variables, loops and scripts

::: {.callout-tip}
Remember that we have provided a list of helpful tips and hints in the appendix: @sec-unix-tips.
:::

## Variables

_Variables_ are placeholder names to refer to specific values. You can use them as shortcuts to refer back to a specific value or file path. Moreover, they are easy to set and re-use in bash scripts, which we'll introduce later. To set a variable, we assign a value to a name using the equals sign `=`. Afterwards, we can always recall the value via the variable's name, prefixed with a dollar sign `$`. While not strictly necessary, it is good practice to also enclose the name of the variable in `{}`, because it makes creating new variable names a lot easier during scripting.

```bash
$ my_value="Plasmodium falciparum"

$ echo ${my_value}
Plasmodium falciparum
```

As before, we use spaces around the value that we are assigned to the variable. This allows us to use spaces and other special characters inside our value. The variable in our example was a piece of text (a string), but we can also store things like integers (`x=101`) or booleans (`true`/`false`).

The main reason we introduced the concept of variables is because they play an important role in (for) loops, so let us move on to that topic now.

## Loops

Loops provide a powerful method of repeating a set of operations multiple times. They are integral to automation and being able to process large numbers of samples in bioinformatics pipelines, but also very convenient for performing other tasks like renaming a bunch of files. The idea is a bit similar to the concept of globbing, but loops offer a lot more flexibility and control over the process.

The most common type of loops are probably _for loops_:

```bash
$ for nucleotide in A C T G \
> do echo ${nucleotide}
> done
A
C
T
G
```

There are a number of different things going on here:

- The for loop consists out of three different sections:
    1. `for nucleotide in A C T G`: this tells bash that we want to start a for loop. It also defines the range of values that our loop will iterate over, in this case the characters `A`, `C`, `T`, and `G`. Finally, it creates a new variable called `nucleotide`. During every pass or round of the loop, its value will change to one of the values defined in the loop's range.
    2. `do echo $i`: this is the body of the loop. It always starts with `do` and is then followed by one or more commands. In the body, you can make use of the loop variable `$nucleotide`.
    3. `done`: this notifies bash that the body and loop definition end here.
- This is the first time that we see a multi-line bash command. We could have just as well written this statement on a single line (`for i in a c t g; do echo $i; done`), using colons (`;`) to mark the end of each section of the loop.

Instead of looping over a set of words, we can also loop over a range of values:

```bash
$ for i in {1..3}
> do echo ${i} >> loop.txt
> done

$ cat for_loop.txt
1
2
3
```

Also note that we used a different name for our loop variable this time around; you can use any name you like, but `i` is a very common placeholder. To make your scripts easier to read, it is good to stick with a reasonable short, but informative name.


::: {.callout-tip collapse="true"}
## As a reminder, what would have happened if we had used `>` instead of `>>`? (Click me to expand!)

The for loop `for i in {1..3}; do echo ${i} > loop.txt; done` is basically equivalent to running the following three commands one after another:

```bash
echo 1 > loop.txt
echo 2 > loop.txt
echo 3 > loop.txt
```

As we saw in the previous sections, the redirection `>` will always overwrite the contents of its destination file. So in this case, the file would only contain the final number of the loop, namely 3. Loops always run in the order defined in their range.
:::

Let us consider another example of a for loop. Suppose we have a directory with a bunch of



Note that the indentation that we used is not strictly necessary for loops to work, but it does help with legibility and it is common practice to do this, especially in scripts.

---

Loops, combined with scripting, are incredibly useful when performing more advanced operations, like performing the bioinformatics analysis of DNA sequencing reads. For example, to process the DNA reads generated by an AmpliSeq assay and identify the genetic variants (variant calling analysis), the following steps would be performed by looping over the FASTQ file corresponding to each sample:

```
for every FASTQ file:
    1. Perform a quality control step
    2. Map the reads to the reference genome
    3. Call the variants in the alignment
```

---

There actually exists another type of loop, namely the _while loop_. These behave similar, but instead of going through a list of items or a range of numbers, the loop will continue for as long as a certain condition is met. You can find more information [here](https://pressbooks.senecacollege.ca/uli101/chapter/while-loop-in-bash/) in case you are interested.

## Scripts




## Summary

::: {.callout-tip collapse="false"}
## Overview of concepts and commands

- Variables can be assigned via `name=value` and referenced via `${name}`
- For loops are used to iterate over a list of items

:::
